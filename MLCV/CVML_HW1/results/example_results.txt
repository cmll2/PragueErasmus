Example results on a few test runs of the algorithm.

==============================================================================================================================
Visual rsult of the following call is in "ex1.png".
>>> python .\evaluator.py --data=debug --seed=42 --points=50 --n_components=2 --tol=0.001 --max_iter=100
Evaluation of Expectation-Maximisation GMM for 50 points from data 'debug' with 2 components.
>>> The algorithm finished in  0.0040 seconds with 6 iterations.
The computed parameters:
Weights: [0.4862 0.5138]
Means:
[[-0.2231 -0.3005]
 [ 3.8029  3.115 ]]
Covariance matrices:
[[[ 0.6585 -0.0847]
  [-0.0847  0.9876]]

 [[ 1.435   0.3287]
  [ 0.3287  1.7598]]]

==============================================================================================================================
Visual rsult of the following call is in "ex2.png".
>>> python .\evaluator.py --data=debug --seed=1337 --points=500 --n_components=2 --tol=0.001 --max_iter=100
Evaluation of Expectation-Maximisation GMM for 500 points from data 'debug' with 2 components.
>>> The algorithm finished in  0.0030 seconds with 3 iterations.
The computed parameters:
Weights: [0.503 0.497]
Means:
[[ 0.0043 -0.0661]
 [ 3.9502  3.0418]]
Covariance matrices:
[[[ 0.8923 -0.0294]
  [-0.0294  1.0793]]

 [[ 1.7814 -0.144 ]
  [-0.144   1.9718]]]

==============================================================================================================================
Visual rsult of the following call is in "ex3.png".
>>> python .\evaluator.py --data=test --seed=42 --points=100 --n_components=3 --tol=0.001 --max_iter=100
Evaluation of Expectation-Maximisation GMM for 100 points from data 'test' with 3 components.
>>> The algorithm finished in  0.0170 seconds with 21 iterations.
The computed parameters:
Weights: [0.1658 0.3653 0.4689]
Means:
[[ 7.9204  0.8639]
 [ 6.0738 -0.1256]
 [ 0.8705  0.4301]]
Covariance matrices:
[[[ 1.3908 -0.4886]
  [-0.4886  1.0903]]

 [[ 2.3174 -0.5229]
  [-0.5229  0.6442]]

 [[ 2.0533  1.0422]
  [ 1.0422  0.7795]]]

==============================================================================================================================
Visual rsult of the following call is in "ex4.png".
>>> python .\evaluator.py --data=test --seed=1337 --points=2000 --n_components=3 --tol=0.001 --max_iter=100
Evaluation of Expectation-Maximisation GMM for 2000 points from data 'test' with 3 components.
>>> The algorithm finished in  0.0470 seconds with 38 iterations.
The computed parameters:
Weights: [0.1586 0.4977 0.3437]
Means:
[[ 2.9624  1.485 ]
 [ 7.0021  0.0003]
 [-0.0365 -0.0281]]
Covariance matrices:
[[[ 0.4929 -0.1663]
  [-0.1663  0.4701]]

 [[ 2.677   0.0687]
  [ 0.0687  0.9556]]

 [[ 0.9086  0.454 ]
  [ 0.454   0.4698]]]
